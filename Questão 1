package ListaAlgo;

public class Atividade{

    public static void main(String[] args) {
        int[] vetor = {12, 321, 23, 12, 1, 4, 5}; 
        
        int[] vetor2 = {45, 12, 78, 34, 23, 56, 89, 90, 67, 10, 5, 3};

        int[] vetor3 = {100, 200, 50, 150, 300, 250, 400, 350};

        int[] vetor4 = {9, 8, 7, 6, 5, 4, 3, 2, 1};
       
        bubbleSort(vetor);
        System.out.print("bubble Sort: ");

        imprimirVetor(vetor);
        
        selectionSort(vetor2);
        System.out.print("Selection Sort: ");
        imprimirVetor(vetor2);


        insertionSort(vetor3);
        System.out.print("Insertion Sort: ");
        imprimirVetor(vetor3);


        mergeSort(vetor4, 0, vetor4.length - 1);
        System.out.print("Merge Sort: ");
        imprimirVetor(vetor4);
    }
    
    public static void bubbleSort(int[] vetor) {
        int n = vetor.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (vetor[j] > vetor[j + 1]) {
                    int aux = vetor[j];
                    vetor[j] = vetor[j + 1];
                    vetor[j + 1] = aux;
                }
            }
        }
    }
    public static void selectionSort(int[] vetor) {
        int n = vetor.length;
        for (int i = 0; i < n - 1; i++) {
            int menor = i;
            for (int j = i + 1; j < n; j++) {
                if (vetor[j] < vetor[menor]) {
                    menor = j;
                }
            }
            int aux = vetor[menor];
            vetor[menor] = vetor[i];
            vetor[i] = aux;
        }
    }

    public static void insertionSort(int[] vetor) {
        int n = vetor.length;
        for (int i = 1; i < n; i++) {
            int chave = vetor[i];
            int j = i - 1;
            while (j >= 0 && vetor[j] > chave) {
                vetor[j + 1] = vetor[j];
                j--;
            }
            vetor[j + 1] = chave;
        }
    }

    public static void mergeSort(int[] vetor, int inicio, int fim) {
        if (inicio < fim) {
            int meio = (inicio + fim) / 2;
            mergeSort(vetor, inicio, meio);
            mergeSort(vetor, meio + 1, fim);
            merge(vetor, inicio, meio, fim);
        }
    }

    private static void merge(int[] vetor, int inicio, int meio, int fim) {
        int n1 = meio - inicio + 1;
        int n2 = fim - meio;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; i++) {
            L[i] = vetor[inicio + i];
        }
        for (int j = 0; j < n2; j++) {
            R[j] = vetor[meio + 1 + j];
        }

        int i = 0, j = 0;
        int k = inicio;

        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                vetor[k] = L[i];
                i++;
            } else {
                vetor[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            vetor[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            vetor[k] = R[j];
            j++;
            k++;
        }
    }

    public static void imprimirVetor(int[] vetor) {
        for (int i = 0; i < vetor.length; i++) {
            System.out.print(vetor[i] + " ");
        }
        System.out.println();
    
    
}
   
}
